package Parser;
import java_cup.runtime.*;
import AST.*;

parser code {:
public void syntax_error(Symbol s) {
  report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
  java.lang.Exception {
  report_fatal_error("", null);
}
:};

terminal STATE_MACHINE, COMA, PC, PAREN, TESIS, BEGIN, END, ASIG, STATES,
FINAL, INPUTS, LOCAL, OUTPUTS, TRANSITION, BEHAVIOUR, AND, OR, NOT,
START, WITH, CONDITION, STOP, IF, THEN, ENDIF, IDENT, CLOG;

terminal String CSTR, IDENT;
terminal Boolean CLOG;

non terminal S S;
non terminal StateDeclList StateDeclList
non terminal FinalStateDeclList FinalStateDeclList
non terminal IdentList IdentList;
non terminal InputEventDecl InputEventDecl;
non terminal LocalVarDecl LocalVarDecl;
non terminal OutputEventDecl OutputEventDecl;
non terminal Transitions Transitions;
non terminal TransitionList TransitionList;
non terminal TransBehaviour TransBehaviour;
non terminal Statement Statement;
non terminal Transition Transition;
non terminal InitialState InitialState;
non terminal Event Event;
non terminal FinalState FinalState;
non terminal ExpLog ExpLog;
non terminal Condition Condition;
non terminal Initialitation Initialitation;
non terminal SimpleStatementList SimpleStatementList;

precedence left OR;
precedence left AND;
precedence left NOT;

start with S;

S ::=  STATE_MACHINE StateDeclList:sdl FinalStateDeclList:fsdl InputEventDecl:ied LocalVarDecl:lvd OutputEventDecl:oed Initialitation:i Transitions:t	{:RESULT = new S1(sdl,fsdl,ied,lvd,oed,i,t); :}
   |  STATE_MACHINE StateDeclList:sdl FinalStateDeclList:fsdl InputEventDecl:ied OutputEventDecl:oed Initialitation:i Transitions:t	{:RESULT = new S2(sdl,fsdl,ied,oed,i,t); :}   
   |  STATE_MACHINE StateDeclList:sdl InputEventDecl:ied LocalVarDecl:lvd OutputEventDecl:oed Initialitation:i Transitions:t	{:RESULT = new S3(sdl,ied,lvd,oed,i,t); :}
   |  STATE_MACHINE StateDeclList:sdl InputEventDecl:ied OutputEventDecl:oed Initialitation:i Transitions:t	{:RESULT = new S4(sdl,ied,oed,i,t); :}

StateDeclList ::= STATES:s IdentList:il PC	{:RESULT = new StateDeclList(s,il); :}

FinalStateDeclList ::= FINAL STATES:s IdentList:il {:RESULT = new FinalStateDeclList(s,il); :}   

IdentList ::= IDENT:i   {:RESULT = new IdentList1(i); :}    
   | IDENT:i COMA IdentList:il   {:RESULT = new IdentList2(i,il); :}

InputEventDecl ::= INPUTS IdentList:il PC   {:RESULT = new InputEventDec(il); :} 

LocalVarDecl ::= LOCAL IdentList:il PC   {:RESULT = new LocalVarDecl(il); :}   

OutputEventDecl ::= OUTPUTS IdentList:il PC   {:RESULT = new OutputEventDecl(il); :}    

Transitions ::= BEGIN TransitionList:tl END   {:RESULT = new Transitions(tl); :} 

TransitionList ::= Transition:t   {:RESULT = new TransitionList1(t); :}    
   | Transition:t TransitionList:tl   {:RESULT = new TransitionList2(t,tl); :}    
               
Transition ::= TRANSITION PAREN InitialState:is COMA Event:e COMA FinalState:fs TESIS PC   {:RESULT = new FinalState1(is,e,fs); :}    
   | TRANSITION PAREN InitialState:is COMA Event:e COMA FinalState:fs TESIS PC TransBehavior:tb   {:RESULT = new FinalState2(is,e,fs,tb); :}     
   | TRANSITION PAREN InitialState:is COMA Event:e COMA FinalState:fs TESIS PC Condition:c   {:RESULT = new FinalState3(is,e,fs,c); : }
   | TRANSITION PAREN InitialState:is COMA Event:e COMA FinalState:fs TESIS PC Condition:c TransBehavior:tb   {:RESULT = new FinalState4(is,e,fs,c,tb); :}

Condition ::= CONDITION PAREN ExpLog:el TESIS PC   {:RESULT = new Condition(el); :}   

InitialState ::= IDENT:i   {:RESULT = new InitialState(i); :} 

Event ::= IDENT:i   {:RESULT = new Event(i); :}    

FinalState ::= IDENT:i   {:RESULT = new FinalState(i); :} 

TransBehavior ::= BEHAVIOUR Statement:s   {:RESULT = new TransBehavior(s); :}    

Statement ::= Statement:s Statement:es   {:RESULT = new Statement1(s,es); :}    
   | STOP PC
   | IDENT:i ASIG ExpLog:el PC   {:RESULT = new Statement3(i,el); :}    
   | IF ExpLog:el THEN Statement:s ENDIF PC   {:RESULT = new Statement4(el,s); :}

Initialitation ::= START WITH IDENT:i PC SimpleStatementList:ssl   {:RESULT = new Initialitation(i,ssl); :} 
   
SimpleStatementList ::= SimpleStatementList:ssl IDENT:i ASIG CLOG:cl PC   {:RESULT = new SimpleStatementList1(i,cl); :}    
   | IDENT:i ASIG CLOG:cl PC   {:RESULT = new SimpleStatementList2(i,cl); :}    
